services:
  postgres:
    restart: unless-stopped
    image: postgres:15-alpine
    container_name: postgres-v-1
    environment:
      POSTGRES_DB: ${POSTGRES_DB_NAME}
      POSTGRES_PASSWORD: ${POSTGRES_V_1_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    volumes:
      - ${BIND_MOUNT_DATA_PATH}/postgres_data/data:/var/lib/postgresql/data
  redis:
    restart: unless-stopped
    image: redis:7.2.1-alpine
    container_name: redis-v-1
  meilisearch:
    restart: unless-stopped
    image: getmeili/meilisearch:v1.5
    container_name: meilisearch-v-1
    environment:
      MEILI_ENV: production
      MEILI_MASTER_KEY: ${MEILISEARCH_V_1_MASTER_KEY}
    volumes:
      - ${BIND_MOUNT_DATA_PATH}/meili_data:/meili_data
  django:
    restart: unless-stopped
    build:
      context: ./V-Django-Backend/
      dockerfile: ./compose/prod/django/Dockerfile
    image: django-v-1:latest
    container_name: django-v-1
    command: gunicorn --workers 4 core.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - .:/app
      - django_static:/django_app/django_static/
    environment: &env-vars
      MEILISEARCH_V_1_MASTER_KEY: ${MEILISEARCH_V_1_MASTER_KEY}
      POSTGRES_V_1_PASSWORD: ${POSTGRES_V_1_PASSWORD}
      DJANGO_V_1_SECRET_KEY: ${DJANGO_V_1_SECRET_KEY}
      POSTGRES_DB_NAME: ${POSTGRES_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      GOOGLE_OAUTH_CLIENT_ID: ${GOOGLE_OAUTH_CLIENT_ID}
      GOOGLE_OAUTH_CLIENT_SECRET: ${GOOGLE_OAUTH_CLIENT_SECRET}
      CLOUDFLARE_TURNSTILE_SECRET_KEY: ${CLOUDFLARE_TURNSTILE_SECRET_KEY}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      ADMIN_URL_SEGMENT: ${ADMIN_URL_SEGMENT}
    env_file:
      - ./V-Django-Backend/compose/prod/django/.env.prod
    depends_on:
      - postgres
      - redis
      - meilisearch
  celery-worker:
    restart: unless-stopped
    image: django-v-1:latest
    container_name: celery-worker-v-1
    entrypoint: ./compose/prod/django/celery/workers/entrypoint.sh
    command: celery -A core worker --loglevel=info
    volumes:
      - .:/app
    environment: *env-vars
    env_file:
      - ./V-Django-Backend/compose/prod/django/.env.prod
    depends_on:
      - postgres
      - redis
      - django
  celery-beat:
    restart: unless-stopped
    image: django-v-1:latest
    container_name: celery-beat-v-1
    entrypoint: ./compose/prod/django/celery/beat/entrypoint.sh
    command: celery -A core beat --loglevel=info
    volumes:
      - .:/app
    environment: *env-vars
    env_file:
      - ./V-Django-Backend/compose/prod/django/.env.prod
    depends_on:
      - postgres
      - redis
      - django
  go-meilisearch-gateway:
    restart: unless-stopped
    container_name: go-meilisearch-gateway-v-1
    build:
      context: ./Go-Meilisearch-Gateway/
      dockerfile: Dockerfile
    environment:
      MEILISEARCH_V_1_MASTER_KEY: ${MEILISEARCH_V_1_MASTER_KEY}
      # also set in the .env file used by django/celery, make sure it's correct
      MEILISEARCH_URL: "http://meilisearch:7700"
    depends_on:
      - meilisearch
  nginx: 
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./Nginx/Dockerfile
      args:
        # for Vite
        REACT_API_URL: ${REACT_API_URL}
        REACT_ClOUDFLARE_TURNSTILE_SITE_KEY: ${REACT_ClOUDFLARE_TURNSTILE_SITE_KEY}
        REACT_URL: ${REACT_URL}
        REACT_GO_MEILISEARCH_GATEWAY_URL: ${REACT_GO_MEILISEARCH_GATEWAY_URL}
        NODE_ENV: 'production'
    container_name: nginx-v-1
    ports:
      - 80:80
      - 443:443
    volumes:
      - django_static:/django_app/django_static
      - ./Nginx/prod:/etc/nginx/conf.d
      - ../certbot/www/:/var/www/certbot/:rw
      - ../certbot/conf/:/etc/letsencrypt/:rw
    depends_on: 
      - django
      - go-meilisearch-gateway
  certbot:
    restart: unless-stopped
    image: certbot/certbot:latest
    container_name: certbot-v-1
    volumes:
      - ../certbot/www/:/var/www/certbot/:rw
      - ../certbot/conf/:/etc/letsencrypt/:rw
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  django_static:
